---
title: "Your Title"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 
We use (`*`) to indicate a problem that we think might be time consuming. 
    
## Style Points (10 pts) 
Please refer to the minilesson on code style
**[here](https://uchicago.zoom.us/rec/share/pG_wQ-pHTQrJTmqNn4rcrw5V194M2H2s-2jdy8oVhWHkd_yZt9o162IWurpA-fxU.BIQlSgZLRYctvzp-)**.

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.
    - Partner 1 (name and cnet ID):
    - Partner 2 (name and cnet ID):
3. Partner 1 will accept the `ps4` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: \*\*\_\_\*\* \*\*\_\_\*\*
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: \*\*\_\_\*\* Late coins left after submission: \*\*\_\_\*\*
7. Knit your `ps4.qmd` to an PDF file to make `ps4.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps4.qmd` and `ps4.pdf` to your github repo.
9. (Partner 1): submit `ps4.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

**Important:** Repositories are for tracking code. **Do not commit the data or shapefiles to your repo.** The best way to do this is with `.gitignore`, which we have covered in class. If you do accidentally commit the data, Github has a [guide](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history). The best course of action depends on whether you have pushed yet. This also means that both partners will have to download the initial raw data and any data cleaning code will need to be re-run on both partners' computers. 

## Download and explore the Provider of Services (POS) file (10 pts)

1. I put six variables: PRVDR_CTGRY_SBTYP_CD (subtype of provider), PRVDR_CTGRY_CD (type of provider), FAC_NAME (name of provider), PRVDR_NUM ( CMS Certification Number), PGM_TRMNTN_CD ( current termination status), ZIP_CD(zipcode).

2. 
```{python}
import pandas as pd
import os

base_path="/Users/ruyuzhang/Desktop/PPHA 30538/problem-set-4-luyao-ruyu/dataset"
path2016=os.path.join(base_path,"pos2016.csv")

df_2016=pd.read_csv(path2016)

import altair as alt
alt.renderers.enable("png")
import warnings 
warnings.filterwarnings('ignore')
```

    a.
```{python}
hospital_2016 = df_2016[(df_2016['PRVDR_CTGRY_CD'] == 1) & (df_2016['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_count_2016 = hospital_2016.shape[0]
hospital_count_2016
 ```

There are 7245 short-term hospitals reported in this data.

    b.
3. 
```{python}
path2017=os.path.join(base_path,"pos2017.csv")
df_2017=pd.read_csv(path2017,encoding="ISO-8859-1")

path2018=os.path.join(base_path,"pos2018.csv")
df_2018=pd.read_csv(path2018,encoding="ISO-8859-1")

path2019=os.path.join(base_path,"pos2019.csv")
df_2019=pd.read_csv(path2019,encoding="ISO-8859-1")

hospital_2017 = df_2017[(df_2017['PRVDR_CTGRY_CD'] == 1) & (df_2017['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_2017['Year'] = 2017
hospital_2018 = df_2018[(df_2018['PRVDR_CTGRY_CD'] == 1) & (df_2018['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_2018['Year'] = 2018
hospital_2019 = df_2019[(df_2019['PRVDR_CTGRY_CD'] == 1) & (df_2019['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_2019['Year'] = 2019
hospital_2016['Year'] = 2016

#append 4 datasets together
hospital_all = pd.concat([hospital_2016, hospital_2017, hospital_2018, hospital_2019,], ignore_index=True)

#Plot the number of observations by years
year_all = hospital_all['Year'].value_counts().reset_index()
year_all.columns = ['Year', 'Count']

chart_all = alt.Chart(year_all).mark_bar().encode(
    x=alt.X('Year:O', title='Year'),
    y=alt.Y('Count:Q', title='Number of Observations',),
    tooltip=['Year', 'Count']
).properties(
    title='Number of Observations by Years',
    width=400,
    height=250
)
chart_all
```

4. 
    a.
```{python}
#plot number of unique hospitals per year
unique_hospitals = hospital_all.groupby('Year')['PRVDR_NUM'].nunique().reset_index()
unique_hospitals.columns = ['Year', 'Unique_Hospitals']

chart_unique = alt.Chart(unique_hospitals).mark_bar().encode(
    x=alt.X('Year:O', title='Year'),
    y=alt.Y('Unique_Hospitals:Q', title='Number of Unique Hospitals',),
    tooltip=['Year', 'Unique_Hospitals']
).properties(
    title='Number of Unique Hospitals by Years',
    width=400,
    height=250
)
chart_unique
```


    b.

## Identify hospital closures in POS file (15 pts) (*)

1. 
2. 
3. 
    a.
    b.
    c.

## Download Census zip code shapefile (10 pt) 

1. 
    a.
    b. 
2. 

## Calculate zip codeâ€™s distance to the nearest hospital (20 pts) (*)

1. 
2. 
3. 
4. 
    a.
    b.
5. 
    a.
    b.
    c.
    
## Effects of closures on access in Texas (15 pts)

1. 
2. 
3. 
4. 

## Reflecting on the exercise (10 pts) 
