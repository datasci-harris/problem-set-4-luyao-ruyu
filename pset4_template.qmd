---
title: "Your Title"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 
We use (`*`) to indicate a problem that we think might be time consuming. 
    
## Style Points (10 pts) 
Please refer to the minilesson on code style
**[here](https://uchicago.zoom.us/rec/share/pG_wQ-pHTQrJTmqNn4rcrw5V194M2H2s-2jdy8oVhWHkd_yZt9o162IWurpA-fxU.BIQlSgZLRYctvzp-)**.

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.
    - Partner 1 (Ruyu Zhang and ruyuzhang):
    - Partner 2 (Luyao Guo and gluyao):
3. Partner 1 will accept the `ps4` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: \*\*\_\_\*\* \*\*\_\_\*\*
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: \*\*\_\_\*\* Late coins left after submission: \*\*\_\_\*\*
7. Knit your `ps4.qmd` to an PDF file to make `ps4.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps4.qmd` and `ps4.pdf` to your github repo.
9. (Partner 1): submit `ps4.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

**Important:** Repositories are for tracking code. **Do not commit the data or shapefiles to your repo.** The best way to do this is with `.gitignore`, which we have covered in class. If you do accidentally commit the data, Github has a [guide](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history). The best course of action depends on whether you have pushed yet. This also means that both partners will have to download the initial raw data and any data cleaning code will need to be re-run on both partners' computers. 

## Download and explore the Provider of Services (POS) file (10 pts)

1. I put six variables: PRVDR_CTGRY_SBTYP_CD (subtype of provider), PRVDR_CTGRY_CD (type of provider), FAC_NAME (name of provider), PRVDR_NUM ( CMS Certification Number), PGM_TRMNTN_CD ( current termination status), ZIP_CD(zipcode).

2. 
```{python}
import warnings
import altair as alt
import pandas as pd
import os

base_path = "/Users/ruyuzhang/Desktop/PPHA 30538/problem-set-4-luyao-ruyu/dataset"
path2016 = os.path.join(base_path, "pos2016.csv")

df_2016 = pd.read_csv(path2016)

alt.renderers.enable("png")
warnings.filterwarnings('ignore')
```

    a.
```{python}
hospital_2016 = df_2016[(df_2016['PRVDR_CTGRY_CD'] == 1)
                        & (df_2016['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_count_2016 = hospital_2016.shape[0]
hospital_count_2016
 ```

There are 7245 short-term hospitals reported in this data. I think the number makes sense.

    b.
According to American Hospital Association (AHA) Data, there are 6,120 hospitals in the United States in 2022, including 5129 community hospitals. Citation:https://www.aha.org/statistics/fast-facts-us-hospitals

Possible reasons: Variations in defining "short-term hospital" can lead to differences. For instance, some sources might exclude specialty hospitals or certain government-operated facilities. Also, the dataset might include facilities beyond the U.S., such as territories or military hospitals, which could inflate the count.


3. 
```{python}
path2017 = os.path.join(base_path, "pos2017.csv")
df_2017 = pd.read_csv(path2017, encoding="ISO-8859-1")

path2018 = os.path.join(base_path, "pos2018.csv")
df_2018 = pd.read_csv(path2018, encoding="ISO-8859-1")

path2019 = os.path.join(base_path, "pos2019.csv")
df_2019 = pd.read_csv(path2019, encoding="ISO-8859-1")

hospital_2017 = df_2017[(df_2017['PRVDR_CTGRY_CD'] == 1)
                        & (df_2017['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_2017['Year'] = 2017
hospital_2018 = df_2018[(df_2018['PRVDR_CTGRY_CD'] == 1)
                        & (df_2018['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_2018['Year'] = 2018
hospital_2019 = df_2019[(df_2019['PRVDR_CTGRY_CD'] == 1)
                        & (df_2019['PRVDR_CTGRY_SBTYP_CD'] == 1)]
hospital_2019['Year'] = 2019
hospital_2016['Year'] = 2016

# append 4 datasets together
hospital_all = pd.concat(
    [hospital_2016, hospital_2017, hospital_2018, hospital_2019,], ignore_index=True)

# Plot the number of observations by years
year_all = hospital_all['Year'].value_counts().reset_index()
year_all.columns = ['Year', 'Count']

chart_raw = alt.Chart(year_all).mark_bar().encode(
    x=alt.X('Year:O', title='Year'),
    y=alt.Y('Count:Q', title='Number of Observations',),
    tooltip=['Year', 'Count']
).properties(
    title='Number of Observations by Years',
    width=400,
    height=250
)

text_labels = chart_raw.mark_text(
    align='center',
    baseline='bottom',
    dy=-5,
    color='black'
).encode(
    text=alt.Text('Count:Q', format='.0f')
)

chart_all = chart_raw + text_labels

chart_all
```

4. 
    a.
```{python}
# plot number of unique hospitals per year
unique_hospitals = hospital_all.groupby(
    'Year')['PRVDR_NUM'].nunique().reset_index()
unique_hospitals.columns = ['Year', 'Unique_Hospitals']

chart_raw_2 = alt.Chart(unique_hospitals).mark_bar().encode(
    x=alt.X('Year:O', title='Year'),
    y=alt.Y('Unique_Hospitals:Q', title='Number of Unique Hospitals',),
    tooltip=['Year', 'Unique_Hospitals']
).properties(
    title='Number of Unique Hospitals by Years',
    width=400,
    height=250
)

text_labels_2 = chart_raw_2.mark_text(
    align='center',
    baseline='bottom',
    dy=-5,
    color='black'
).encode(
    text=alt.Text('Unique_Hospitals:Q', format='.0f')
)

chart_unique = chart_raw_2 + text_labels_2

chart_unique
```


    b. These two plots are identical, indicating that each hospital appears only once per year, with no duplicate entries. Also, the similarity in counts across years implies a stable and consistent reporting process, with minimal fluctuations in the number of short-term hospitals tracked each year.

## Identify hospital closures in POS file (15 pts) (*)

1. 

```{python}
# Filter active short-term hospitals in 2016
hospital_2016 = df_2016[(df_2016['PRVDR_CTGRY_CD'] == 1) &
                        (df_2016['PRVDR_CTGRY_SBTYP_CD'] == 1) &
                        (df_2016['PGM_TRMNTN_CD'] == 0)]
active_2016 = hospital_2016[['FAC_NAME', 'ZIP_CD', 'PRVDR_NUM']]

# Define a function to check for hospital closures


def check_closure(year_df, active_df, year):
    year_active = year_df[(year_df['PRVDR_CTGRY_CD'] == 1) &
                          (year_df['PRVDR_CTGRY_SBTYP_CD'] == 1) &
                          (year_df['PGM_TRMNTN_CD'] == 0)]['PRVDR_NUM']
    closed = active_df[~active_df['PRVDR_NUM'].isin(year_active)].copy()
    closed['Closure_Year'] = year
    return closed


# Check closures in subsequent years
closed_2017 = check_closure(df_2017, active_2016, 2017)
closed_2018 = check_closure(df_2018, active_2016, 2018)
closed_2019 = check_closure(df_2019, active_2016, 2019)

# Combine all closure data
all_closed = pd.concat([closed_2017, closed_2018, closed_2019]
                       ).drop_duplicates(subset='PRVDR_NUM')

# Display the number of suspected closures and the first 10 rows
num_closures = all_closed.shape[0]
print(f"Number of suspected hospital closures: {num_closures}")
print(all_closed[['FAC_NAME', 'ZIP_CD', 'Closure_Year']].head(10))
```



2. 

```{python}
sorted_closures = all_closed.sort_values(by='FAC_NAME')[['FAC_NAME', 'Closure_Year']]
print("Sorted list of the first 10 hospitals by name and their year of closure:")
print(sorted_closures.head(10))

```

3. 
    a.
```{python}
# Function to identify potential mergers/acquisitions by checking ZIP codes with stable or increasing active hospitals
def identify_mergers(df_closed, next_year_df):
    active_next_year = next_year_df[(next_year_df['PRVDR_CTGRY_CD'] == 1) & 
                                    (next_year_df['PRVDR_CTGRY_SBTYP_CD'] == 1) & 
                                    (next_year_df['PGM_TRMNTN_CD'] == 0)]
    merged_hospitals = df_closed[df_closed['ZIP_CD'].isin(active_next_year['ZIP_CD'])]
    return merged_hospitals

# Identify potential mergers for each year
potential_mergers_2017 = identify_mergers(closed_2017, df_2018)
potential_mergers_2018 = identify_mergers(closed_2018, df_2019)

# Combine all potential mergers/acquisitions and remove duplicates
potential_mergers = pd.concat([potential_mergers_2017, potential_mergers_2018]).drop_duplicates(subset='PRVDR_NUM')

# Count the number of potential mergers/acquisitions
num_potential_mergers = potential_mergers.shape[0]
print(f"Number of hospitals potentially identified as mergers/acquisitions: {num_potential_mergers}")
```
   
    b.

```{python}
# Remove potential mergers from the suspected closures to get corrected closures
corrected_closures = all_closed[~all_closed['PRVDR_NUM'].isin(potential_mergers['PRVDR_NUM'])]

# Count the number of corrected hospital closures
num_corrected_closures = corrected_closures.shape[0]
print(f"Number of corrected hospital closures: {num_corrected_closures}")

```
   
    c.
```{python}
# Sort the corrected list of closures by name and display the first 10 rows
sorted_corrected_closures = corrected_closures.sort_values(by='FAC_NAME')[['FAC_NAME', 'Closure_Year']]
print("Sorted list of the first 10 corrected hospital closures:")
print(sorted_corrected_closures.head(10))

```

## Download Census zip code shapefile (10 pt) 

1. 
    a.
    .shp is Shapefile. This file contains the geometry data (points, lines, or polygons) that represent spatial features.
    .dbf is Database File. This file stores attribute data in tabular form, linked to each spatial feature in the .shp file. 
    .shx is Shape Index Format. This file holds an index of the geometry in the .shp file, allowing for faster access to spatial features.
    .prj is Projection Format. This file contains coordinate system and projection information, which defines how the spatial data aligns with the Earth's surface.
    .xml is Metadata. This file holds metadata about the shapefile dataset, describing its source, creation details, and other contextual information.

    b. .shp file: 837.5 MB 
       .dbf file: 6.4 MB 
       .shx file: 265 KB 
       .prj file: 165 bytes 
       .xml file: 16 KB 

       The .shp file is the largest, containing the spatial data, followed by the .dbf file for attribute data. The .shx, .prj, and .xml files are much smaller, primarily containing indexing, projection, and metadata, respectively.

2. 
```{python}
import matplotlib.pyplot as plt
import geopandas as gpd
import shapely
from shapely import Polygon, Point

pathshp = os.path.join(base_path, "gz_2010_us_860_00_500k.shp")
df_shp = gpd.read_file(pathshp)

# Filter Texas zip codes that start with '75', '76', '77', '78', or '79'
df_texas = df_shp[df_shp["ZCTA5"].str.startswith(
    ('75', '76', '77', '78', '79'))]
df_texas['ZCTA5'] = df_texas['ZCTA5'].astype(str)

# calculate the number of hospitals per zip code in 2016
hospital_zip = hospital_2016.groupby(
    'ZIP_CD').size().reset_index(name='hospital_count')
hospital_zip['ZIP_CD'] = hospital_zip['ZIP_CD'].astype(
    str).str.replace(r'\.0$', '', regex=True).str.zfill(5)

print(hospital_zip)

# plot a choropleth
map_texas = df_texas.merge(
    hospital_zip, left_on='ZCTA5', right_on='ZIP_CD', how='left')
map_texas['hospital_count'] = map_texas['hospital_count'].fillna(0)

map_texas.plot(column='hospital_count', legend=True).set_axis_off()
plt.title('Number of Hospitals per Zip Code in Texas (2016)', fontsize=12)

plt.show()
```

## Calculate zip code’s distance to the nearest hospital (20 pts) (*)

1. 
2. 
3. 
4. 
    a.
    b.
5. 
    a.
    b.
    c.
    
## Effects of closures on access in Texas (15 pts)

1. 
```{python}
# Filter closures for Texas zip codes that start with '75', '76', '77', '78', or '79'
corrected_closures['ZIP_CD'] = corrected_closures['ZIP_CD'].astype(
    str).str.replace(r'\.0$', '', regex=True).str.zfill(5)
closures_texas = corrected_closures[corrected_closures['ZIP_CD'].str.startswith(
    ('75', '76', '77', '78', '79'))]

# Count the number of closures per Texas zip code
closures_texas_count = closures_texas.groupby(
    'ZIP_CD').size().reset_index(name='closure_count')

closures_texas_count
```

2. 
```{python}
# Merge shapefile data with closure counts
map_closures_texas = df_texas.merge(
    closures_texas_count, left_on='ZCTA5', right_on='ZIP_CD', how='left')
map_closures_texas['closure_count'] = map_closures_texas['closure_count'].fillna(
    0)

# plot a choropleth
map_closures_texas.plot(column='closure_count', legend=True).set_axis_off()
plt.title('Texas Zip Codes Affected by Hospital Closures (2016-2019)', fontsize=12)
plt.show()

# number of directly affected zip codes in Texas
directly_zip_count = closures_texas_count.shape[0]
print(f"The number of directly affected zip codes in Texas is {
      directly_zip_count}.")
```

3. 
```{python}
# create a GeoDataFrame of the directly affected zip codes
direct_closures_texas_gdf = df_texas.merge(
    closures_texas_count, left_on='ZCTA5', right_on='ZIP_CD', how='inner')

# create a 10-mile buffer around them (approximately 16093 meters)
closures_buffer = direct_closures_texas_gdf.copy()
closures_buffer['geometry'] = closures_buffer.geometry.buffer(16093)

# do a spatial join with the overall Texas zip code shapefile.
indirectly_zip = gpd.sjoin(df_texas, closures_buffer,
                           how="inner", predicate="intersects")

# Exclude zip codes that are directly affected
indirectly_zip = indirectly_zip[~indirectly_zip['ZCTA5_left'].isin(
    direct_closures_texas_gdf['ZCTA5'])]

# number of indirectly affected zip codes in Texas
indirectly_zip_count = indirectly_zip.shape[0]
print(f"The number of indirectly affected zip codes in Texas is {
      indirectly_zip_count}.")
```

4. 
```{python}
import matplotlib.patches as mpatches

fig, ax = plt.subplots()
# Plot all Texas zip codes as "Not affected"
df_texas.plot(ax=ax, color="green", alpha=0.4, label="Not affected")
# Plot directly affected zip codes
direct_closures_texas_gdf.plot(
    ax=ax, color="red", alpha=0.7, label="directly affected").set_axis_off()
# Plot indirectly affected zip codes
indirectly_zip.plot(ax=ax, color="lightblue", alpha=0.5,
                    label="indirectly affected").set_axis_off()

# add legend and title
not_affected_patch = mpatches.Patch(
    color="green", alpha=0.4, label="Not affected")
directly_affected_patch = mpatches.Patch(
    color="red", alpha=0.7, label="Directly affected")
indirectly_affected_patch = mpatches.Patch(
    color="lightblue", alpha=0.5, label="Indirectly affected")
plt.legend(handles=[not_affected_patch, directly_affected_patch,
           indirectly_affected_patch], loc="lower left")
plt.title('Texas Zip Codes by Closure Impact (2016-2019)', fontsize=12)


plt.show()
```

## Reflecting on the exercise (10 pts) 
a. 
b. The current 10-mile radius method is a useful approximation but has limitations:
    1. Affects urban and rural areas differently, as rural residents often have fewer alternatives within 10 miles.
    2. Population density should be considered, since closures in high-density areas may affect more people.